# Makefile for lbcd
# $Id$

srcdir		= @srcdir@
VPATH		= @srcdir@

@SET_MAKE@

CC		= @CC@

DEFS		= @DEFS@
LIBS		= @LIBS@
CFLAGS		= @CFLAGS@

SHELL		= /bin/sh

prefix		= @prefix@
exec_prefix	= @exec_prefix@
bindir		= @bindir@
sbindir		= @sbindir@
mandir		= @mandir@
man1dir		= $(mandir)/man1
man8dir		= $(mandir)/man8

INSTALL		= @INSTALL@
INSTALL_DATA	= @INSTALL_DATA@
INSTALL_PROGRAM	= @INSTALL_PROGRAM@
INSTALL_SCRIPT	= @INSTALL_SCRIPT@

PACKAGE		= @PACKAGE_TARNAME@
VERSION		= @PACKAGE_VERSION@
TARDIR		= $(PACKAGE)-$(VERSION)
DEBNAME		= $(PACKAGE)_$(VERSION)
TARNAME		= $(TARDIR).tar

HDRS   = config.h lbcd.h lbcdload.h protocol.h

SRCS   = lbcd.c server.c util.c \
	kernel.c get_user.c tmp_full.c weight.c load.c

OBJS   = $(SRCS:.c=.o)
LIBRARY= modules/liblbcd.a

all: lbcd

.c.o: $(HDRS) $*.c
	$(CC) -c -I. -I$(srcdir) $(DEFS) $(CFLAGS) $<

lbcd: $(OBJS) $(LIBRARY)
	$(CC) $(LDFLAGS) -o $@ $(OBJS) $(LIBRARY) $(LIBS)

$(LIBRARY):
	cd modules && ${MAKE}

lbcd.8: lbcd.pod configure.ac
	pod2man --release=$(VERSION) --center="Maintenance Commands" \
	    --section=8 lbcd.pod > $@

lbcdclient.1: lbcdclient configure.ac
	pod2man --release=$(VERSION) --center="User Commands" \
	    --section=1 lbcdclient > $@

install: lbcd lbcd.8 lbcdclient.1
	$(INSTALL) -d $(bindir) $(sbindir) $(man1dir) $(man8dir)
	$(INSTALL_PROGRAM) lbcd $(sbindir)/lbcd
	$(INSTALL_SCRIPT) $(srcdir)/lbcdclient $(bindir)/lbcdclient
	$(INSTALL_DATA) lbcd.8 $(man8dir)/lbcd.8
	$(INSTALL_DATA) lbcdclient.1 $(man1dir)/lbcdclient.1

clean:
	-rm -f *.o core lbcd
	cd modules && $(MAKE) $@

distclean: clean
	-rm -f Makefile config.log config.status config.cache config.h
	cd modules && $(MAKE) $@

maintclean: distlcean
	-rm -f config.h.in configure $(TARNAME).gz $(TARNAME).gz.md5
	-rm -f *.orig.tar.gz $(DEBNAME)* *_$(VERSION)-*.deb

dist: lbcd.8 lbcdclient.1
	rm -rf $(TARNAME).gz $(TARNAME).gz.md5 $(TARDIR)
	mkdir $(TARDIR)
	rsync -C -a ./ $(TARDIR)/
	rsync -a lbcd.8 lbcdclient.1 $(TARDIR)/
	cd $(TARDIR) && autoconf && autoheader && rm -rf autom4te.cache
	tar cf $(TARNAME) $(TARDIR)
	gzip -9 $(TARNAME)
	md5sum $(TARNAME).gz > $(TARNAME).gz.md5

# Prepare to make a Debian package.  This doesn't do the actual work of
# creating the package; there are too many different flags we might want to
# use.  It just copies things around so that the Debian packaging will work
# properly.
deb-prep: dist
	rm -f *.orig.tar.gz $(DEBNAME)* *_$(VERSION)-*.deb
	cp $(TARNAME).gz $(DEBNAME).orig.tar.gz

# Dependencies.
kernel.o: $(srcdir)/kernel.c \
	$(srcdir)/arch/aix.c $(srcdir)/arch/hpux10.c \
	$(srcdir)/arch/irix.c $(srcdir)/arch/linux.c \
	$(srcdir)/arch/osf.c $(srcdir)/arch/solaris.c
