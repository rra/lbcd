#! /bin/sh
### BEGIN INIT INFO
# Provides:             lbcd
# Required-Start:       $remote_fs $network $syslog
# Required-Stop:        $remote_fs $network $syslog
# Default-Start:        2 3 4 5
# Default-Stop:
# Short-Description:    Load balancer client daemon
# Description:          Provides system load, login, and service information
#                       via UDP, intended primarily for use with the lbnamed
#                       load balancing system.
### END INIT INFO

# Author: Russ Allbery <rra@debian.org>

PATH=/sbin:/bin:/usr/sbin:/usr/bin
DESC="load balancer client daemon"
NAME=lbcd
DAEMON=/usr/sbin/$NAME
DAEMON_OPTS=
PIDDIR=/var/run/$NAME
PIDFILE=${PIDDIR}/$NAME.pid
SCRIPTNAME=/etc/init.d/$NAME
OWNER=lbcd
GROUP=lbcd

# Exit if the package is not installed.
[ -x "$DAEMON" ] || exit 0

# Read configuration variable file if it is present.
[ -r /etc/default/$NAME ] && . /etc/default/$NAME

# Load the VERBOSE setting and other rcS variables.
. /lib/init/vars.sh

# Define LSB log_* functions.
. /lib/lsb/init-functions

# Create a directory for the PID file, since lbcd runs as a non-root user and
# creates its own PID file.
create_piddir()
{
    mkdir -p "$PIDDIR"
    chown "$OWNER":"$GROUP" "$PIDDIR"
}

# Start the daemon.
do_start()
{
    create_piddir
    start-stop-daemon --start --quiet --chuid "$USER":"$GROUP" \
        --pidfile "$PIDFILE" --exec "$DAEMON" --test > /dev/null || return 1
    start-stop-daemon --start --quiet --chuid "$USER":"$GROUP" \
        --pidfile "$PIDFILE" --exec "$DAEMON" -- $DAEMON_OPTS || return 2
}

# Stop the daemon.
do_stop()
{
    start-stop-daemon --stop --quiet --retry=TERM/30/KILL/5 \
        --pidfile "$PIDFILE" --name "$NAME"
    RETVAL="$?"
    [ "$RETVAL" = 2 ] && return 2
    rm -f "$PIDFILE"
    return "$RETVAL"
}

case "$1" in
    start)
        if [ "$NO_START" = 1 ] ; then
            log_warning_msg "Not starting $NAME (see /etc/default/$NAME)"
            exit 0
        fi
        [ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC" "$NAME"
        do_start
        case "$?" in
            0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
            2)   [ "$VERBOSE" != no ] && log_end_msg 1 ;;
        esac
        ;;
    stop)
        [ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME"
        do_stop
        case "$?" in
            0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
            2)   [ "$VERBOSE" != no ] && log_end_msg 1 ;;
        esac
        ;;
    status)
        status_of_proc -p "$PIDFILE" "$DAEMON" "$NAME" && exit 0 || exit $?
        ;;
    reload|force-reload)
        # No need to reload, as there's no configuration.
        ;;
    restart)
        log_daemon_msg "Restarting $DESC" "$NAME"
        do_stop
        case "$?" in
            0|1)
                do_start
                case "$?" in
                    0) log_end_msg 0 ;;
                    1) log_end_msg 1 ;; # Old process is still running
                    *) log_end_msg 1 ;; # Failed to start
                esac
                ;;
            *)
                # Failed to stop.
                log_end_msg 1
                ;;
        esac
        ;;
    *)
        echo "Usage: $SCRIPTNAME {start|stop|status|restart}" >&2
        exit 3
        ;;
esac

:
